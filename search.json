[{"path":"https://jakubsob.github.io/shinytest3/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 shinytest3 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jakubsob.github.io/shinytest3/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakub Sobolewski. Author, maintainer.","code":""},{"path":"https://jakubsob.github.io/shinytest3/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sobolewski J (2025). shinytest3: shinytest3. R package version 0.1.0, https://jakubsob.github.io/shinytest3/.","code":"@Manual{,   title = {shinytest3: shinytest3},   author = {Jakub Sobolewski},   year = {2025},   note = {R package version 0.1.0},   url = {https://jakubsob.github.io/shinytest3/}, }"},{"path":"https://jakubsob.github.io/shinytest3/index.html","id":"shinytest3","dir":"","previous_headings":"","what":"shinytest3","title":"shinytest3","text":"üöß package development yet ready production use. üöß shinytest3 makes testing Shiny development easier, fewer reasons tests break Shiny code changes. shinytest3 extension shinytest2 helps write testable Shiny code, enables usage robust selectors, facilitates test code reuse.","code":""},{"path":"https://jakubsob.github.io/shinytest3/index.html","id":"why-do-you-need-shinytest3","dir":"","previous_headings":"","what":"Why do you need {shinytest3}?","title":"shinytest3","text":"One reasons shinytest2 tests tend break changes Shiny code tight coupling structure app. shinytest2 uses input IDs find elements app. change simple renaming input parent module cause tests fail. shinytest3 designed mitigate issues providing flexible approach element selection. Instead relying input IDs find elements, shinytest3 introduces testable_component helps target tests. can use action interact component.","code":""},{"path":[]},{"path":"https://jakubsob.github.io/shinytest3/index.html","id":"why-create-this-package","dir":"","previous_headings":"","what":"Why create this package?","title":"shinytest3","text":"goal strike balance shinytest2 provides shortcuts testing Shiny apps easily, cost tests fragility, robust, black-box approach web app testing frameworks like Cypress Playwright. strike balance, shinytest3 exposes robust methods interacting asserting state app. encourages usage testid targetting inputs/outputs custom components app. encourages robust assertions. $is_visible(testid), $is_disabled(testid) encourages checking can observed users app, expose internal details app AppDriver$get_values(). backwards compatibility shinytest2. can swap shinytest2 shinytest3 keep tests working, add new tests practices shinytest3.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":null,"dir":"Reference","previous_headings":"","what":"Driver ‚Äî Driver","title":"Driver ‚Äî Driver","text":"layer extending shinytest2::AppDriver. Instead relying fragile Shiny IDs, driver uses semantic test identifiers can change independently application logic.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"Driver class provides reliable testing framework : Using testid attributes component identification instead Shiny IDs Automatically detecting component types via testtype attributes Dispatching appropriate actions based component type (testtype) Providing error checking user-observable state validation Components wrapped testable_component() add necessary data attributes driver work properly.","code":"# Wrap a component used in the app in a function. # Use testable_component() to attach test attrubutes. dropdown <- function(id, label = NULL, choices, ..., testid) {   shinyWidgets::pickerInput(     inputId = id,     label = label,     choices = choices,     ...   ) |>     testable_component(       id = id,       testid = testid,       testtype = \"dropdown\"     ) }  app <- shiny::shinyApp(   ui = bslib::page_fluid(     # Attach a unique testid for each visible component     dropdown(       id = \"test-picker\",       label = \"Letter\",       choices = c(\"A\", \"B\"),       testid = \"Letter\"     )   ),   server = function(input, output) {} )  d <- Driver$new(app)  # Dispatch an action to \"Letter\" component. It sets the value to \"B\". # Custom action wasn't registered for `testtype = \"dropdown\"`, # `shinytest2::AppDriver$set_inputs` will be used to set the value. d$dispatch(\"Letter\", value = \"B\")  # Get the value of \"Letter\" component. d$get_value(testid = \"Letter\") # Will return \"B\""},{"path":[]},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Driver ‚Äî Driver","text":"shinytest2::AppDriver","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Driver ‚Äî Driver","text":"shinytest2::AppDriver$click() shinytest2::AppDriver$expect_download() shinytest2::AppDriver$expect_html() shinytest2::AppDriver$expect_js() shinytest2::AppDriver$expect_screenshot() shinytest2::AppDriver$expect_text() shinytest2::AppDriver$expect_unique_names() shinytest2::AppDriver$expect_values() shinytest2::AppDriver$get_chromote_session() shinytest2::AppDriver$get_dir() shinytest2::AppDriver$get_download() shinytest2::AppDriver$get_html() shinytest2::AppDriver$get_js() shinytest2::AppDriver$get_logs() shinytest2::AppDriver$get_screenshot() shinytest2::AppDriver$get_url() shinytest2::AppDriver$get_values() shinytest2::AppDriver$get_variant() shinytest2::AppDriver$get_window_size() shinytest2::AppDriver$initialize() shinytest2::AppDriver$log_message() shinytest2::AppDriver$run_js() shinytest2::AppDriver$set_inputs() shinytest2::AppDriver$set_window_size() shinytest2::AppDriver$stop() shinytest2::AppDriver$upload_file() shinytest2::AppDriver$view() shinytest2::AppDriver$wait_for_idle() shinytest2::AppDriver$wait_for_js() shinytest2::AppDriver$wait_for_value()","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Driver ‚Äî Driver","text":"Driver$dispatch() Driver$get_value() Driver$get_text() Driver$get() Driver$is_visible() Driver$is_disabled() Driver$expect_output_errors()","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"method-dispatch-","dir":"Reference","previous_headings":"","what":"Method dispatch()","title":"Driver ‚Äî Driver","text":"Dispatch action component based type method automatically detects component type using testtype attribute dispatches appropriate action. action system uses S3 method dispatch handle different component types appropriately. can register custom actions extending action class:   custom action registered, falls back shinytest2::AppDriver$set_inputs.","code":"action.dropdown <- function(x, ...) {   # Open the dropdown   # Click on a choice }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Driver ‚Äî Driver","text":"","code":"Driver$dispatch(testid, ...)"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Driver ‚Äî Driver","text":"testid character string identifying component via testid attribute ... Additional arguments passed component-specific action method. Common arguments include value setting input values. Arguments passed custom action implementation.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"dispatch system works follows: Waits app idle Validates target component findable visible Extracts Shiny ID component type data attributes Creates object specified class (component type) Calls appropriate action.* method component type","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Driver ‚Äî Driver","text":"Invisible NULL. Called side effects.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"\\dontrun{ # Set value for a text input driver$dispatch(\"Username\", value = \"John Doe\")  # Click a button (no additional arguments needed) driver$dispatch(\"Submit\")  # Set multiple selection for a picker input driver$dispatch(\"Species\", value = c(\"Setosa\")) }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"method-get-value-","dir":"Reference","previous_headings":"","what":"Method get_value()","title":"Driver ‚Äî Driver","text":"Get current value input component Retrieves current value Shiny input either testid direct input/output/export name.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Driver ‚Äî Driver","text":"","code":"Driver$get_value(   testid = missing_arg(),   input = missing_arg(),   output = missing_arg(),   export = missing_arg() )"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Driver ‚Äî Driver","text":"testid character string identifying component via testid attribute. provided, parameters ignored. input character string specifying input name directly. compatibility shinytest2. output character string specifying output name directly. compatibility shinytest2. export character string specifying export name directly. compatibility shinytest2.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"testid provided: Waits app idle Validates target component exists findable Extracts Shiny ID testshinyid attribute Returns value using resolved ID direct names provided, behaves like standard shinytest2::AppDriver$get_value().","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Driver ‚Äî Driver","text":"current value specified input, output, export. Return type depends component type (e.g., character, numeric, list).","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"\\dontrun{ # Get value using testid (recommended) current_text <- driver$get_value(testid = \"Username\")  # Get value using direct input name (not recommended) current_text <- driver$get_value(input = \"module-nested_module-username\")  # Get value using testid (recommended) plot_data <- driver$get_value(testid = \"Scatterplot\")  # Get output value (not recommended) plot_data <- driver$get_value(output = \"module-nested_module-main_plot\") }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"method-get-text-","dir":"Reference","previous_headings":"","what":"Method get_text()","title":"Driver ‚Äî Driver","text":"Get text content component Extracts visible text content component, either testid CSS selector. useful reading labels, button text, output text, textual content displayed app.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Driver ‚Äî Driver","text":"","code":"Driver$get_text(testid = missing_arg(), selector = missing_arg())"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Driver ‚Äî Driver","text":"testid character string identifying component via testid attribute. provided, selector parameter ignored. selector CSS selector string directly targeting elements (alternative testid)","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"testid provided, method: Validates target component exists findable Constructs CSS selector using testid Extracts text content matching element selector provided directly, passed underlying shinytest2::AppDriver$get_text() method.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Driver ‚Äî Driver","text":"character string containing text content target element. Returns empty string text found.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"\\dontrun{ # Get text using testid (recommended) title_text <- driver$get_text(testid = \"Title\")  # Get text using CSS selector (not recommended) title_text <- driver$get_text(selector = \"h1.main-title\") }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Driver ‚Äî Driver","text":"Execute custom JavaScript code component Runs arbitrary JavaScript code context specific component identified testid. provides flexible way interact components extract information available driver methods.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Driver ‚Äî Driver","text":"","code":"Driver$get(testid, code)"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Driver ‚Äî Driver","text":"testid character string identifying component via testid attribute code character string containing JavaScript code execute. code receives jQuery element(s) matching testid parameter.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"method: Waits app idle Constructs JavaScript call targeting component specified testid Executes provided code component element(s) context Returns result JavaScript code parameter receives jQuery object containing matching elements.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Driver ‚Äî Driver","text":"result JavaScript code execution. Type depends JavaScript code returns (character, numeric, logical, list, etc.).","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"\\dontrun{ # Get a custom attribute value custom_attr <- driver$get(\"Name\", \"(el) => el.attr('custom')\")  # Check if element has a specific CSS class has_class <- driver$get(\"Next step\", \"(el) => el.hasClass('active')\")  # Count child elements child_count <- driver$get(\"Results list\", \"(el) => el.children().length\") }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"method-is-visible-","dir":"Reference","previous_headings":"","what":"Method is_visible()","title":"Driver ‚Äî Driver","text":"Check component visible Determines whether component currently visible DOM. checks CSS visibility, display properties, jQuery's :visible pseudo-selector. Hidden, collapsed, display:none elements return FALSE.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Driver ‚Äî Driver","text":"","code":"Driver$is_visible(testid)"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Driver ‚Äî Driver","text":"testid character string identifying component via testid attribute","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"method: Waits app idle Executes JavaScript check jQuery :visible selector status Returns boolean result particularly useful : Conditional UI elements show/hide based user input Verifying certain elements appear actions Testing responsive design behavior Checking modal popup visibility","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Driver ‚Äî Driver","text":"logical value: TRUE component visible, FALSE otherwise.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"\\dontrun{ # Check if an error message is visible if (driver$is_visible(\"Error message\")) {   error_text <- driver$get_text(testid = \"Error message\") }  # Verify a modal dialog appeared expect_true(driver$is_visible(\"Confirm\"))  # Check if conditional UI element is shown driver$dispatch(\"Show advanced options\", value = TRUE) expect_true(driver$is_visible(\"Advanced options\")) }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"method-is-disabled-","dir":"Reference","previous_headings":"","what":"Method is_disabled()","title":"Driver ‚Äî Driver","text":"Check component disabled Determines whether component currently disabled. checks disabled attribute property HTML elements, prevents user interaction.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Driver ‚Äî Driver","text":"","code":"Driver$is_disabled(testid)"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Driver ‚Äî Driver","text":"testid character string identifying component via testid attribute","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"method: Waits app idle Executes JavaScript check jQuery :disabled selector status Returns boolean result useful : Verifying form controls properly disabled/enabled based conditions Testing input validation states Checking button states processing Ensuring UI elements respond correctly application state changes","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Driver ‚Äî Driver","text":"logical value: TRUE component disabled, FALSE enabled.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"\\dontrun{ # Check if submit button is disabled when form is invalid expect_true(driver$is_disabled(\"Submit\"))  # Verify input becomes enabled after conditions are met driver$dispatch(\"Enable options\", value = TRUE) expect_false(driver$is_disabled(\"Options\")) }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"method-expect-output-errors-","dir":"Reference","previous_headings":"","what":"Method expect_output_errors()","title":"Driver ‚Äî Driver","text":"Verify expected number Shiny output errors Checks visible Shiny error messages page fails test actual number match expected count. crucial testing error handling ensuring app displays appropriate error messages.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Driver ‚Äî Driver","text":"","code":"Driver$expect_output_errors(n = 0)"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Driver ‚Äî Driver","text":"n integer specifying expected number visible Shiny output errors. Defaults 0 (errors expected).","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"Driver ‚Äî Driver","text":"method: Counts visible Shiny output errors (elements class .shiny-output-error) Excludes validation errors (.shiny-output-error-validation) Compares count expected number counts match, test succeeds silently counts match, provides detailed failure information including IDs outputs produced errors typically used verify : unexpected errors occur normal operation (n = 0) Expected errors appear testing error conditions (n > 0) Error recovery works properly (errors disappear fixes)","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Driver ‚Äî Driver","text":"Invisible NULL. Called side effects (test success/failure).","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"\\dontrun{ # Verify no errors during normal operation driver$expect_output_errors() # expects 0 errors  # Test that invalid input produces exactly one error driver$dispatch(\"Category\", value = \"invalid\") driver$expect_output_errors(n = 1) # expects 1 error  driver$dispatch(\"Category\", value = \"valid\") driver$expect_output_errors() # expects 0 errors }"},{"path":"https://jakubsob.github.io/shinytest3/reference/Driver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Driver ‚Äî Driver","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a driver for testing driver <- Driver$new(app_dir = \"path/to/app\")  # Interact with components using testid driver$dispatch(\"Species\", value = \"Setosa\")  # Check component state driver$is_visible(\"Species distribution\")  # Get component values current_value <- driver$get_value(testid = \"Species\")  # Verify no errors are present driver$expect_output_errors(n = 0) } # }   ## ------------------------------------------------ ## Method `Driver$dispatch` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Set value for a text input driver$dispatch(\"Username\", value = \"John Doe\")  # Click a button (no additional arguments needed) driver$dispatch(\"Submit\")  # Set multiple selection for a picker input driver$dispatch(\"Species\", value = c(\"Setosa\")) } # }   ## ------------------------------------------------ ## Method `Driver$get_value` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Get value using testid (recommended) current_text <- driver$get_value(testid = \"Username\")  # Get value using direct input name (not recommended) current_text <- driver$get_value(input = \"module-nested_module-username\")  # Get value using testid (recommended) plot_data <- driver$get_value(testid = \"Scatterplot\")  # Get output value (not recommended) plot_data <- driver$get_value(output = \"module-nested_module-main_plot\") } # }  ## ------------------------------------------------ ## Method `Driver$get_text` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Get text using testid (recommended) title_text <- driver$get_text(testid = \"Title\")  # Get text using CSS selector (not recommended) title_text <- driver$get_text(selector = \"h1.main-title\") } # }  ## ------------------------------------------------ ## Method `Driver$get` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Get a custom attribute value custom_attr <- driver$get(\"Name\", \"(el) => el.attr('custom')\")  # Check if element has a specific CSS class has_class <- driver$get(\"Next step\", \"(el) => el.hasClass('active')\")  # Count child elements child_count <- driver$get(\"Results list\", \"(el) => el.children().length\") } # }  ## ------------------------------------------------ ## Method `Driver$is_visible` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Check if an error message is visible if (driver$is_visible(\"Error message\")) {   error_text <- driver$get_text(testid = \"Error message\") }  # Verify a modal dialog appeared expect_true(driver$is_visible(\"Confirm\"))  # Check if conditional UI element is shown driver$dispatch(\"Show advanced options\", value = TRUE) expect_true(driver$is_visible(\"Advanced options\")) } # }  ## ------------------------------------------------ ## Method `Driver$is_disabled` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Check if submit button is disabled when form is invalid expect_true(driver$is_disabled(\"Submit\"))  # Verify input becomes enabled after conditions are met driver$dispatch(\"Enable options\", value = TRUE) expect_false(driver$is_disabled(\"Options\")) } # }  ## ------------------------------------------------ ## Method `Driver$expect_output_errors` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Verify no errors during normal operation driver$expect_output_errors() # expects 0 errors  # Test that invalid input produces exactly one error driver$dispatch(\"Category\", value = \"invalid\") driver$expect_output_errors(n = 1) # expects 1 error  driver$dispatch(\"Category\", value = \"valid\") driver$expect_output_errors() # expects 0 errors } # }"},{"path":"https://jakubsob.github.io/shinytest3/reference/action.html","id":null,"dir":"Reference","previous_headings":"","what":"Action ‚Äî action","title":"Action ‚Äî action","text":"Action","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Action ‚Äî action","text":"","code":"action(args, id, driver, ...)"},{"path":"https://jakubsob.github.io/shinytest3/reference/action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Action ‚Äî action","text":"args list arguments pass action. id ID component. driver driver object. ... Additional arguments.","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/testable_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Testable component ‚Äî testable_component","title":"Testable component ‚Äî testable_component","text":"Testable component","code":""},{"path":"https://jakubsob.github.io/shinytest3/reference/testable_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testable component ‚Äî testable_component","text":"","code":"testable_component(x, id, testid, testtype = NULL)"},{"path":"https://jakubsob.github.io/shinytest3/reference/testable_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Testable component ‚Äî testable_component","text":"x widget id string, ID widget testid string, testable ID widget testtype string, testable type widget","code":""}]
